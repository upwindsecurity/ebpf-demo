# Ubuntu eBFP/Go development environment
arch: "default"

images:
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 2
memory: "4GiB"

mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true

containerd:
  system: false
  user: false

provision:
# Intall packages
- mode: system
  script: |
    #!/bin/sh
    export DEBIAN_FRONTEND=noninteractive
    export KERNEL_VERSION=`uname -r`
    apt-get update -q
    apt-get install -q -y apt-transport-https ca-certificates
    apt-get install -q -y linux-tools-common linux-tools-generic linux-tools-${KERNEL_VERSION}
    apt-get install -q -y curl jq git
    apt-get install -q -y build-essential llvm clang
    apt-get install -q -y libbpf-dev libelf-dev libpcap-dev

# Install bpftool
- mode: system
  script: |
    #!/bin/sh
    git clone --recurse-submodules https://github.com/libbpf/bpftool.git
    cd bpftool/src
    make install

# Install Go & golangci-lint
- mode: system
  script: |
    #!/bin/sh
    export GO_VERSION="1.21.5"
    export ARCH=`dpkg --print-architecture`
    export OS=`uname -s | tr '[:upper:]' '[:lower:]'`
    PATH="$PATH:/usr/local/go/bin"
    curl -sL https://go.dev/dl/go${GO_VERSION}.${OS}-${ARCH}.tar.gz | tar -v -C /usr/local -xz
    ln -s /usr/local/go/bin/go /usr/local/bin/
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v1.55.2
- mode: user
  script: |
    #!/bin/sh
    echo "PATH=$PATH:/usr/local/go/bin:~/go/bin" >> ~/.bashrc

# Install Docker
- mode: system
  # This script defines the host.docker.internal hostname when hostResolver is disabled.
  # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
  # Names defined in /etc/hosts inside the VM are not resolved inside containers when
  # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
  script: |
    #!/bin/sh
    sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail
    command -v docker >/dev/null 2>&1 && exit 0
    if [ ! -e /etc/systemd/system/docker.socket.d/override.conf ]; then
      mkdir -p /etc/systemd/system/docker.socket.d
      # Alternatively we could just add the user to the "docker" group, but that requires restarting the user session
      cat <<-EOF >/etc/systemd/system/docker.socket.d/override.conf
      [Socket]
      SocketUser=${LIMA_CIDATA_USER}
    EOF
    fi
    export DEBIAN_FRONTEND=noninteractive
    curl -fsSL https://get.docker.com | sh

# Install Cross-Platform Emulators
# See: https://github.com/tonistiigi/binfmt
- mode: system
  script: |
    #!/bin/sh
    docker run --privileged --rm tonistiigi/binfmt --install all

probes:
- description: Provisioning
  script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until command -v go >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "go is not installed yet"
      exit 1
    fi
    if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "docker is not installed yet"
      exit 1
    fi
    if ! timeout 30s bash -c "until pgrep dockerd; do sleep 3; done"; then
      echo >&2 "dockerd is not running"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest

hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal

portForwards:
- guestSocket: "/var/run/docker.sock"
  hostSocket: "{{.Dir}}/sock/docker.sock"

message: |
  Te enter shell on VM
  ------
  limactl shell {{.Name}}

  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima-{{.Name}} --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima-{{.Name}}
  docker run hello-world
